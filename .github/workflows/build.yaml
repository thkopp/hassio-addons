name: Build Home Assistant Addons

on:
  push:
    paths:
      - "addon-*/**"
  workflow_dispatch:
    inputs:
      addon:
        description: "Addon-Ordner zum Bauen (optional)"
        required: false

jobs:
  detect-addons:
    runs-on: ubuntu-latest
    outputs:
      addons: ${{ steps.set_addons.outputs.addons }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed addons
        id: set_addons
        run: |
          if [ -n "${{ github.event.inputs.addon }}" ]; then
            ADDONS_RAW="[\"${{ github.event.inputs.addon }}\"]"
          else
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              BEFORE=$(git rev-parse HEAD~1)
            else
              BEFORE=$(git rev-list --max-parents=0 HEAD)
            fi

            ADDONS_RAW=$(git diff --name-only "$BEFORE" HEAD \
              | grep '^addon-' \
              | cut -d/ -f1 \
              | sort -u \
              | jq -R -s -c 'split("\n")[:-1]')
          fi

          if [ "$ADDONS_RAW" = "[]" ]; then
            echo "‚ö†Ô∏è Kein ge√§ndertes Addon gefunden."
            exit 0
          fi

          ADDONS_OBJ=$(echo "$ADDONS_RAW" | jq -c '[.[] | {addon: .}]')
          echo "‚úÖ Gefundene Addons: $ADDONS_OBJ"
          echo "addons=$ADDONS_OBJ" >> $GITHUB_OUTPUT

  build:
    needs: detect-addons
    if: needs.detect-addons.outputs.addons != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect-addons.outputs.addons) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          wget -q https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Read Addon config
        id: read_config
        run: |
          ADDON="${{ matrix.addon }}"
          CONFIG="$GITHUB_WORKSPACE/$ADDON/config.yaml"

          if [ ! -f "$CONFIG" ]; then
            echo "‚ùå config.yaml f√ºr Addon '$ADDON' nicht gefunden!"
            exit 1
          fi

          VERSION=$(yq -r '.version' "$CONFIG")
          IMAGE=$(yq -r '.image' "$CONFIG")
          ARCHS=$(yq -r '.arch[]' "$CONFIG")
          BUILD_FROM_AMD64=$(yq -r '.build_from.amd64' "$CONFIG")
          BUILD_FROM_ARM64=$(yq -r '.build_from.arm64' "$CONFIG")

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "archs=$ARCHS" >> $GITHUB_OUTPUT
          echo "build_from_amd64=$BUILD_FROM_AMD64" >> $GITHUB_OUTPUT
          echo "build_from_arm64=$BUILD_FROM_ARM64" >> $GITHUB_OUTPUT
          echo "‚úÖ Addon config gelesen: $ADDON Version: $VERSION"

      - name: Build and push Addon
        run: |
          ADDON="${{ matrix.addon }}"
          VERSION="${{ steps.read_config.outputs.version }}"
          IMAGE="${{ steps.read_config.outputs.image }}"
          ARCHS="${{ steps.read_config.outputs.archs }}"
          BF_AMD64="${{ steps.read_config.outputs.build_from_amd64 }}"
          BF_ARM64="${{ steps.read_config.outputs.build_from_arm64 }}"

          for ARCH in $ARCHS; do
            case "$ARCH" in
              amd64) BUILD_FROM="$BF_AMD64" ;;
              arm64|aarch64) BUILD_FROM="$BF_ARM64" ;;
              *) echo "‚ùå Unbekannte Architektur $ARCH"; exit 1 ;;
            esac

            echo "üî® Building $ADDON for $ARCH using $BUILD_FROM..."
            docker buildx build \
              --platform $ARCH \
              --build-arg BUILD_FROM="$BUILD_FROM" \
              -t "$IMAGE:latest" \
              -t "$IMAGE:$VERSION" \
              "$GITHUB_WORKSPACE/$ADDON" \
              --push
          done
